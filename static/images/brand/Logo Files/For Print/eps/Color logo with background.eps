%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2392 1211
%%HiResBoundingBox: 0 0 2391.1199 1210.07996
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2391.1199 1210.07996 re
W
q
[0.24 0 0 -0.24 0 1210.07996] cm
q
0 0 9962.5 5040.625 re
W*
q
[3.125484 0 0 3.124812 0.00980079 0] cm
/DeviceRGB {} CS
[0.2235 0.2431 0.2745] SC
/DeviceRGB {} cs
[0.2235 0.2431 0.2745] sc
0 0 3187.5 1613.09692 re
f
Q
q
[27.221901 0 0 27.216049 -469.76096 284.24182] cm
q
28.021 164 m
120.869995 150.406006 169.93599 87.071999 108.173004 0.320007 c
142.575012 83.189011 100.612007 73.624008 42.722008 54.496006 c
132.987 90.900002 92.668999 139.641006 28.021 164 c
h
W*
[107.639115 0 0 163.679995 28.021001 0.320001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1.318433 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.258 mul 0.318 add
1 index 1 exp 0.27 mul 0.314 add
2 index 1 exp 0.286 mul 0.31 add
4 3 roll pop 
}
/xpdfFunc0_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.258 mul 0.576 add
1 index 1 exp -0.27 mul 0.584 add
2 index 1 exp -0.286 mul 0.596 add
4 3 roll pop 
}
/xpdfFunc0_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc0_0 } {
0.5 sub 2 mul 0 add xpdfFunc0_1
} ifelse
}
def
-0 1.318433 0 axialSH
Q
q
116.118996 47.042999 m
116.118988 47.272709 116.113358 47.502277 116.102089 47.731712 c
116.090813 47.961147 116.073921 48.190166 116.051407 48.41877 c
116.028885 48.647373 116.000771 48.875282 115.967072 49.102505 c
115.933357 49.329727 115.894096 49.555984 115.849289 49.781281 c
115.804474 50.006577 115.754158 50.230637 115.698349 50.453461 c
115.642532 50.676285 115.581284 50.897606 115.51461 51.117428 c
115.447922 51.337246 115.375885 51.555294 115.2985 51.771576 c
115.221115 51.987862 115.138466 52.202114 115.05056 52.414337 c
114.962646 52.62656 114.869591 52.836498 114.771385 53.044151 c
114.673172 53.251812 114.569923 53.456936 114.461639 53.659523 c
114.353355 53.862106 114.240158 54.061913 114.122055 54.258942 c
114.00396 54.455971 113.881104 54.649982 113.753487 54.840981 c
113.62587 55.031979 113.493645 55.21973 113.356812 55.404236 c
113.219971 55.588741 113.07869 55.769779 112.932968 55.947346 c
112.787239 56.124912 112.637245 56.298798 112.482979 56.469002 c
112.32872 56.639202 112.170372 56.805519 112.007942 56.967953 c
111.845512 57.130379 111.679199 57.288727 111.508995 57.442993 c
111.338791 57.597256 111.164909 57.747253 110.987343 57.892979 c
110.809769 58.038704 110.628723 58.179981 110.444221 58.316818 c
110.25972 58.453655 110.071968 58.58588 109.880974 58.713501 c
109.689972 58.841122 109.495964 58.963982 109.298943 59.082077 c
109.101913 59.200172 108.902107 59.313362 108.699524 59.42165 c
108.496933 59.52993 108.291809 59.633179 108.08416 59.731392 c
107.876495 59.829601 107.666557 59.922661 107.454338 60.010567 c
107.242111 60.098473 107.027863 60.181118 106.811577 60.258503 c
106.595299 60.335892 106.377251 60.407928 106.157433 60.474609 c
105.937614 60.54129 105.716293 60.602539 105.493462 60.658352 c
105.270638 60.714172 105.046577 60.764488 104.821281 60.809299 c
104.595985 60.854115 104.369728 60.893375 104.142502 60.927082 c
103.915276 60.960789 103.68737 60.988899 103.458771 61.011414 c
103.230164 61.033928 103.001144 61.050823 102.771713 61.062096 c
102.542274 61.073364 102.312706 61.078999 102.082993 61.079002 c
101.853279 61.078999 101.623711 61.073364 101.394272 61.062092 c
101.164848 61.050819 100.935829 61.033928 100.707222 61.011414 c
100.478615 60.988899 100.250702 60.960789 100.023483 60.927082 c
99.796257 60.893379 99.569992 60.854118 99.344696 60.809303 c
99.1194 60.764488 98.89534 60.714172 98.672516 60.658356 c
98.449692 60.602543 98.228371 60.541294 98.008553 60.474617 c
97.788727 60.407932 97.570679 60.335896 97.354401 60.258507 c
97.138115 60.181122 96.923866 60.098476 96.711647 60.010571 c
96.49942 59.922665 96.289474 59.829605 96.081818 59.731392 c
95.874168 59.633179 95.66906 59.52993 95.466476 59.42165 c
95.263893 59.313362 95.064079 59.200172 94.86705 59.082081 c
94.670021 58.963985 94.476006 58.841125 94.285011 58.713505 c
94.094017 58.585884 93.906265 58.453659 93.721764 58.316822 c
93.537262 58.179985 93.356224 58.038704 93.178658 57.892979 c
93.001083 57.747253 92.827194 57.597256 92.65699 57.442993 c
92.486786 57.288727 92.320473 57.130379 92.158043 56.967953 c
91.995613 56.805519 91.837265 56.639202 91.683006 56.468998 c
91.528748 56.298798 91.378754 56.124912 91.233025 55.947342 c
91.087296 55.769775 90.946007 55.588737 90.809166 55.404232 c
90.672333 55.219727 90.5401 55.031979 90.412483 54.840981 c
90.284866 54.649982 90.16201 54.455971 90.043915 54.258942 c
89.925819 54.061913 89.81263 53.862106 89.704346 53.659523 c
89.596062 53.456936 89.492813 53.251812 89.3946 53.044155 c
89.296387 52.836498 89.203323 52.62656 89.115417 52.414337 c
89.027512 52.202114 88.94487 51.987862 88.867485 51.77158 c
88.7901 51.555298 88.718063 51.337246 88.651382 51.117428 c
88.584702 50.897606 88.523453 50.676285 88.467628 50.453461 c
88.411819 50.230637 88.361504 50.006577 88.316689 49.781281 c
88.271873 49.555984 88.232613 49.329723 88.198914 49.102501 c
88.165199 48.875282 88.137093 48.647373 88.114578 48.41877 c
88.092064 48.190166 88.075165 47.961151 88.063896 47.731716 c
88.052628 47.502281 88.046997 47.272709 88.046997 47.042999 c
88.046997 46.81329 88.052628 46.583717 88.063896 46.354286 c
88.075165 46.124855 88.092064 45.895836 88.114578 45.667233 c
88.137093 45.438629 88.165199 45.210712 88.198906 44.983486 c
88.232613 44.756264 88.271873 44.530003 88.316689 44.304707 c
88.361504 44.079411 88.411819 43.85535 88.467628 43.632523 c
88.523453 43.409698 88.584702 43.188377 88.651382 42.968559 c
88.718063 42.748741 88.7901 42.530689 88.867485 42.314407 c
88.94487 42.098125 89.027512 41.883873 89.115417 41.67165 c
89.203323 41.459427 89.296387 41.249489 89.3946 41.041836 c
89.492813 40.834183 89.596062 40.629063 89.704346 40.426476 c
89.81263 40.223888 89.925819 40.024082 90.043915 39.827053 c
90.16201 39.630024 90.284866 39.436012 90.412483 39.245014 c
90.5401 39.05402 90.672333 38.866268 90.809174 38.681763 c
90.946014 38.497257 91.087303 38.316223 91.233032 38.138657 c
91.378761 37.961086 91.528755 37.787201 91.683014 37.616997 c
91.837273 37.446789 91.995613 37.280472 92.158043 37.118046 c
92.320473 36.955616 92.486786 36.797272 92.65699 36.643009 c
92.827194 36.488747 93.001083 36.338749 93.178658 36.193024 c
93.356224 36.047298 93.537254 35.906013 93.721756 35.769176 c
93.906258 35.632339 94.094009 35.500111 94.285004 35.37249 c
94.475998 35.244869 94.670013 35.122013 94.86705 35.003922 c
95.064079 34.88583 95.263885 34.77264 95.466469 34.664356 c
95.669052 34.556068 95.874168 34.45282 96.081818 34.354607 c
96.289474 34.25639 96.499413 34.16333 96.711639 34.075424 c
96.923866 33.987518 97.138115 33.904873 97.354401 33.827484 c
97.570679 33.750095 97.788727 33.678062 98.008553 33.611385 c
98.228371 33.544704 98.449692 33.483456 98.672516 33.427643 c
98.89534 33.371826 99.1194 33.32151 99.344696 33.276699 c
99.569992 33.231884 99.796257 33.192623 100.023483 33.158916 c
100.250702 33.125214 100.478615 33.097103 100.707222 33.074589 c
100.935829 33.052071 101.164848 33.035179 101.394272 33.023911 c
101.623711 33.012638 101.853279 33.007 102.082993 33.007 c
102.312706 33.007 102.542274 33.012634 102.771706 33.023907 c
103.001144 33.035179 103.230164 33.052071 103.458771 33.074589 c
103.68737 33.097103 103.915283 33.125214 104.142509 33.15892 c
104.369728 33.192623 104.595985 33.231884 104.821281 33.276699 c
105.046577 33.32151 105.270638 33.371826 105.493462 33.427643 c
105.716293 33.483456 105.937614 33.544704 106.157433 33.611385 c
106.377243 33.678062 106.595291 33.750095 106.811577 33.827484 c
107.027855 33.904873 107.242104 33.987518 107.45433 34.075424 c
107.666557 34.16333 107.876495 34.25639 108.084152 34.354607 c
108.291809 34.45282 108.496933 34.556068 108.699524 34.664356 c
108.902107 34.77264 109.101906 34.88583 109.298935 35.003922 c
109.495964 35.122013 109.689972 35.244869 109.880966 35.37249 c
110.07196 35.500111 110.259712 35.632343 110.444221 35.76918 c
110.628723 35.906017 110.809761 36.047302 110.987335 36.193027 c
111.164894 36.338753 111.338783 36.488747 111.508987 36.643009 c
111.679184 36.797272 111.845497 36.955616 112.007935 37.118046 c
112.170364 37.280472 112.328712 37.446789 112.482971 37.616997 c
112.63723 37.787201 112.787231 37.961086 112.932961 38.138657 c
113.07869 38.316223 113.219971 38.497257 113.356804 38.681763 c
113.493637 38.866268 113.62587 39.05402 113.753487 39.245014 c
113.881104 39.436012 114.003967 39.630024 114.122063 39.827057 c
114.240158 40.024082 114.353355 40.223888 114.461639 40.426476 c
114.569923 40.629063 114.673172 40.834179 114.771385 41.041832 c
114.869591 41.249489 114.962646 41.459427 115.05056 41.67165 c
115.138466 41.883873 115.221115 42.098125 115.2985 42.314407 c
115.375885 42.530689 115.447922 42.748741 115.514603 42.968559 c
115.581284 43.188381 115.642532 43.409702 115.698357 43.63253 c
115.754166 43.855354 115.804474 44.079414 115.849289 44.30471 c
115.894096 44.530006 115.933357 44.756268 115.967056 44.98349 c
116.000771 45.210712 116.028885 45.438629 116.051407 45.667233 c
116.073921 45.895836 116.090813 46.124855 116.102081 46.354286 c
116.11335 46.583717 116.118988 46.81329 116.118996 47.042999 c
h
W
[28.072001 0 0 28.072002 88.047001 33.006994] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin 0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.258 mul 0.318 add
1 index 1 exp 0.27 mul 0.314 add
2 index 1 exp 0.286 mul 0.31 add
4 3 roll pop 
}
/xpdfFunc1_0 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp -0.258 mul 0.576 add
1 index 1 exp -0.27 mul 0.584 add
2 index 1 exp -0.286 mul 0.596 add
4 3 roll pop 
}
/xpdfFunc1_1 exch def
{ dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
dup 0.5 lt { 0 sub 2 mul 0 add xpdfFunc1_0 } {
0.5 sub 2 mul 0 add xpdfFunc1_1
} ifelse
}
def
-0 1 0 axialSH
Q
Q
q
[65.949615 0 0 65.93544 3789.4089 1652.40808] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
0.3 18.82 m
0.34 18.379999 0.476667 17.940001 0.71 17.5 c
0.943333 17.059999 1.22 16.700001 1.54 16.42 c
2.966667 17.286667 4.32 17.719999 5.6 17.719999 c
6.16 17.719999 6.57 17.593332 6.83 17.34 c
7.09 17.086668 7.22 16.773334 7.22 16.4 c
7.22 15.773333 6.8 15.28 5.96 14.92 c
3.6 13.92 l
2.68 13.506667 1.973333 13.01 1.48 12.43 c
0.986667 11.85 0.74 11.113334 0.74 10.22 c
0.74 9.606667 0.863333 9.046667 1.11 8.54 c
1.356667 8.033333 1.703333 7.593333 2.15 7.22 c
2.596667 6.846666 3.126667 6.556666 3.74 6.35 c
4.353334 6.143333 5.033334 6.04 5.78 6.04 c
7.273334 6.04 8.780001 6.42 10.3 7.18 c
10.233334 8.206666 9.873333 9.006666 9.22 9.58 c
7.86 8.926667 6.66 8.6 5.62 8.6 c
5.086667 8.6 4.686667 8.72 4.42 8.96 c
4.153333 9.2 4.02 9.473333 4.02 9.78 c
4.02 10.299999 4.413333 10.719999 5.2 11.04 c
7.6 12.06 l
8.613333 12.486667 9.37 13.033333 9.87 13.7 c
10.37 14.366667 10.62 15.14 10.62 16.02 c
10.62 16.646668 10.506666 17.220001 10.28 17.74 c
10.053333 18.259998 9.716666 18.709999 9.27 19.09 c
8.823333 19.470001 8.266666 19.766668 7.599999 19.98 c
6.933333 20.193331 6.153333 20.299997 5.259999 20.299999 c
3.526666 20.299999 1.873333 19.806665 0.299999 18.82 c
0.3 18.82 l
h
17.440001 15.72 m
15.860001 15.72 l
15.860001 20 l
15.433333 20.08 14.900001 20.120001 14.26 20.120001 c
13.606668 20.120001 13.073334 20.08 12.66 20 c
12.66 6.44 l
12.8 6.3 l
13.96 6.273333 14.923333 6.253333 15.690001 6.24 c
16.456667 6.226667 17.040001 6.22 17.440001 6.22 c
18.173334 6.22 18.843334 6.32 19.450001 6.52 c
20.056667 6.72 20.573334 7.02 21 7.42 c
21.426666 7.82 21.756666 8.316667 21.99 8.91 c
22.223333 9.503333 22.34 10.186667 22.34 10.96 c
22.34 11.733334 22.219999 12.416667 21.98 13.01 c
21.74 13.603334 21.406666 14.099999 20.98 14.5 c
20.553333 14.900001 20.036667 15.203334 19.43 15.41 c
18.823334 15.616666 18.16 15.719999 17.440001 15.72 c
h
15.86 8.66 m
15.86 13.32 l
16.233334 13.306666 16.530001 13.296666 16.75 13.29 c
16.969999 13.283334 17.113333 13.280001 17.18 13.28 c
17.540001 13.28 17.84 13.216666 18.08 13.09 c
18.32 12.963334 18.513332 12.796667 18.66 12.59 c
18.806667 12.383333 18.913334 12.14 18.98 11.860001 c
19.046665 11.580001 19.079998 11.286668 19.08 10.980001 c
19.08 10.686667 19.046667 10.400001 18.98 10.120001 c
18.913332 9.840001 18.809999 9.593334 18.67 9.380001 c
18.530001 9.166668 18.346668 8.996668 18.120001 8.870001 c
17.893333 8.743334 17.626667 8.68 17.320002 8.680001 c
16.500002 8.680001 l
16.500002 8.680001 16.286669 8.673334 15.860002 8.660001 c
15.86 8.66 l
h
34.240002 10.56 m
34.240002 11 34.173336 11.416667 34.040001 11.81 c
33.906666 12.203334 33.73 12.556667 33.510002 12.870001 c
33.290005 13.183334 33.030003 13.456668 32.730003 13.690001 c
32.430004 13.923333 32.120003 14.1 31.800003 14.22 c
32.493336 14.473333 33.006672 15.086667 33.340004 16.06 c
33.940002 17.76 l
34.166668 18.426666 34.500004 18.92 34.940002 19.24 c
34.740002 19.506666 34.440002 19.73 34.040001 19.91 c
33.639999 20.09 33.200001 20.18 32.720001 20.18 c
32.240002 20.18 31.866669 20.043333 31.6 19.77 c
31.333332 19.496668 31.086664 19.02 30.860001 18.34 c
30.140001 16.24 l
29.993336 15.839999 29.796669 15.533333 29.550001 15.32 c
29.303333 15.106667 28.933334 15 28.440001 15 c
27.620001 15 l
27.620001 20 l
27.193335 20.08 26.660002 20.120001 26.02 20.120001 c
25.379999 20.120001 24.853333 20.08 24.440001 20 c
24.440001 6.44 l
24.58 6.3 l
25.74 6.273333 26.716667 6.253333 27.51 6.24 c
28.303333 6.226667 28.926668 6.22 29.380001 6.22 c
30.113335 6.22 30.780001 6.31 31.380001 6.49 c
31.98 6.67 32.489998 6.94 32.91 7.3 c
33.330002 7.66 33.656666 8.113333 33.889999 8.66 c
34.123333 9.206666 34.239998 9.839999 34.239998 10.56 c
34.240002 10.56 l
h
27.620001 8.62 m
27.620001 12.54 l
28.220001 12.54 28.733334 12.53 29.16 12.51 c
29.586666 12.490001 29.93 12.410001 30.190001 12.270001 c
30.450001 12.13 30.646667 11.933333 30.780001 11.68 c
30.913334 11.426667 30.98 11.06 30.980001 10.58 c
30.980001 9.286666 30.353334 8.639999 29.100002 8.639999 c
28.270002 8.639999 l
28.270002 8.639999 28.053335 8.633332 27.620003 8.619999 c
27.620001 8.62 l
h
36.779999 20 m
36.779999 6.34 l
37.193333 6.26 37.726665 6.22 38.379997 6.22 c
39.033329 6.22 39.57333 6.26 39.999996 6.34 c
39.999996 20 l
39.57333 20.08 39.033329 20.120001 38.379997 20.120001 c
37.726665 20.120001 37.193333 20.08 36.779999 20 c
h
53.84 6.2 m
53.98 6.34 l
53.98 19.940001 l
53.446667 20.060001 52.816666 20.120001 52.09 20.120001 c
51.363335 20.120001 50.720001 20.08 50.16 20 c
47.02 12.84 l
46.646667 12.026667 46.266666 11.086667 45.880001 10.020001 c
45.82 10.040001 l
45.98 11.986668 46.060001 13.980001 46.060001 16.02 c
46.060001 20 l
45.646667 20.08 45.146667 20.120001 44.560001 20.120001 c
43.973335 20.120001 43.48 20.08 43.080002 20 c
43.080002 6.4 l
43.586666 6.28 44.196667 6.22 44.910004 6.22 c
45.623341 6.22 46.260006 6.26 46.820004 6.34 c
49.920002 13.48 l
50.480003 14.799999 50.893337 15.813333 51.160004 16.52 c
51.240005 16.479999 l
51.080006 14.626666 51.000004 12.66 51.000004 10.58 c
51.000004 8.139999 l
51.000004 7.446666 51.140003 6.949999 51.420002 6.65 c
51.700001 6.35 52.153336 6.2 52.780003 6.2 c
53.840004 6.2 l
53.84 6.2 l
h
62.18 8.98 m
62.200001 10.459999 l
62.200001 20 l
61.746666 20.08 61.206669 20.120001 60.580002 20.120001 c
59.953335 20.120001 59.42667 20.08 59 20 c
59 8.98 l
57.720001 9 l
55.66 9 l
55.580002 8.613334 55.540001 8.17 55.540001 7.67 c
55.540001 7.17 55.580002 6.726667 55.66 6.34 c
65.559998 6.34 l
65.666664 6.686667 65.720001 7.106667 65.720001 7.6 c
65.720001 8.093333 65.58667 8.45 65.32 8.67 c
65.053329 8.89 64.626663 9 64.040001 9 c
63.459999 9 l
62.200001 8.98 l
62.18 8.98 l
h
70.339996 15.96 m
70.32 17.4 l
70.32 17.42 l
70.933334 17.393333 71.426666 17.379999 71.800003 17.379999 c
76.440002 17.379999 l
76.440002 17.873333 76.420006 18.253332 76.380005 18.519999 c
76.220009 19.546665 75.540009 20.059998 74.340004 20.059998 c
69.020004 20.059998 l
68.446671 20.059998 67.996674 19.893332 67.670006 19.559998 c
67.343338 19.226664 67.180008 18.773331 67.180008 18.199997 c
67.180008 6.479997 l
67.320007 6.339997 l
75.94001 6.339997 l
76.020012 6.726664 76.060013 7.146663 76.060013 7.599997 c
76.060013 8.05333 75.966682 8.526664 75.780014 9.019997 c
70.320015 9.019997 l
70.340012 10.459997 l
70.340012 11.859997 l
70.686676 11.846664 71.140007 11.839996 71.700012 11.839996 c
74.76001 11.839996 l
74.880013 12.21333 74.94001 12.639997 74.94001 13.119996 c
74.94001 13.599996 74.880013 14.039995 74.76001 14.439996 c
70.340012 14.439996 l
70.340012 15.959995 l
70.339996 15.96 l
h
88.459999 10.56 m
88.459999 11 88.393333 11.416667 88.260002 11.81 c
88.126671 12.203334 87.950005 12.556667 87.730003 12.870001 c
87.510002 13.183334 87.25 13.456668 86.950005 13.690001 c
86.650009 13.923333 86.340004 14.1 86.020004 14.22 c
86.713341 14.473333 87.226669 15.086667 87.560005 16.06 c
88.160004 17.76 l
88.386665 18.426666 88.720001 18.92 89.160004 19.24 c
88.959999 19.506666 88.660004 19.73 88.260002 19.91 c
87.860001 20.09 87.420006 20.18 86.940002 20.18 c
86.459999 20.18 86.08667 20.043333 85.82 19.77 c
85.553329 19.496668 85.306664 19.02 85.080002 18.34 c
84.360001 16.24 l
84.213333 15.839999 84.01667 15.533333 83.770004 15.32 c
83.523338 15.106667 83.153343 15 82.660004 15 c
81.840004 15 l
81.840004 20 l
81.413338 20.08 80.880005 20.120001 80.240005 20.120001 c
79.600006 20.120001 79.073341 20.08 78.660004 20 c
78.660004 6.44 l
78.800003 6.3 l
79.959999 6.273333 80.936668 6.253333 81.730003 6.24 c
82.523338 6.226667 83.146675 6.22 83.600006 6.22 c
84.333336 6.22 85.000008 6.31 85.600006 6.49 c
86.200005 6.67 86.710007 6.94 87.130005 7.3 c
87.550003 7.66 87.876671 8.113333 88.110008 8.66 c
88.343346 9.206666 88.460014 9.839999 88.460007 10.56 c
88.459999 10.56 l
h
81.839996 8.62 m
81.839996 12.54 l
82.439995 12.54 82.953331 12.53 83.379997 12.51 c
83.806664 12.490001 84.149994 12.410001 84.409996 12.270001 c
84.669998 12.13 84.866661 11.933333 84.999992 11.68 c
85.133324 11.426667 85.199989 11.06 85.199989 10.58 c
85.199989 9.286666 84.573326 8.639999 83.319992 8.639999 c
82.48999 8.639999 l
82.48999 8.639999 82.273323 8.633332 81.839989 8.619999 c
81.839996 8.62 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
